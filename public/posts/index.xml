<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rory Allen</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Rory Allen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Closure Encounter</title>
      <link>http://localhost:1313/posts/post-20241223/</link>
      <pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post-20241223/</guid>
      <description>&lt;p&gt;I recently got this in a conversation I had with chatGPT. I hazard to guess who it should really be attributed to. If you wrote this originally (or summink v similar) please reach out.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import XCTest&#xA;&#xA;class APITests: XCTestCase {&#xA;&#xA;    func testFetchData() {&#xA;        // Create the expectation&#xA;        let expectation = self.expectation(description: &amp;#34;Fetching data from API&amp;#34;)&#xA;        &#xA;        // Simulate an asynchronous API call&#xA;        fetchDataFromAPI { success in&#xA;            XCTAssertTrue(success, &amp;#34;API call should succeed&amp;#34;)&#xA;            expectation.fulfill() // Fulfill the expectation when done&#xA;        }&#xA;        &#xA;        // Wait for the expectation with a timeout&#xA;        wait(for: [expectation], timeout: 5.0)&#xA;    }&#xA;    &#xA;    // Mock API function&#xA;    private func fetchDataFromAPI(completion: @escaping (Bool) -&amp;gt; Void) {&#xA;        DispatchQueue.global().asyncAfter(deadline: .now() + 2) {&#xA;            completion(true) // Simulating a successful API call&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The original prompt was searching for a bit of clarity on how to implement expectations in testing Swift code. What it gave me was a bit of clarity on a few topics that had given me head-scratching moments in the past, namely: expectations, mocks, and escaping closures&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A tale as old as me</title>
      <link>http://localhost:1313/posts/post-20241220/</link>
      <pubDate>Fri, 20 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/post-20241220/</guid>
      <description>&lt;p&gt;This is the first post, so i will begin by putting down a few things about myself.&lt;/p&gt;&#xA;&lt;p&gt;At the time of typing this, I am 43 years old. I feel old as dirt&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;I love Dungeons &amp;amp; Dragons (TTRPG).&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve played since I was little. I usually DM now. My players are cool because they know the rules better than I do. D&amp;amp;D has gone through so many rule sets over the years that I&amp;rsquo;ve really just gotten bored of learning the rules. I know that annoys people sometimes because, as the DM, I need to make rulings during play. But I prefer to just be the guy who knows where the story is (mostly) going and the guy who controls the monsters. I refer to my players for what the rules are.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
